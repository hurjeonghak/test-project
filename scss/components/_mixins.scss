//https://www.npmjs.com/package/sass-rem
$rem-baseline: 14px !default;
$rem-fallback: true !default;
$rem-px-only: false !default;
$sqrt_2: 1.41421356237;

@function rem-separator($list, $separator: false) {
  @if $separator=="comma" or $separator=="space" {
    @return append($list, null, $separator);
  }

  @if function-exists("list-separator")==true {
    @return list-separator($list);
  } // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list==$list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value)=="number" and unit($value)=="rem" and $to=="px" {
      $result: append($result, $value / 1rem * $rem-baseline, $separator);
    }
    @else if type-of($value)=="number" and unit($value)=="px" and $to=="rem" {
      $result: append($result, $value / $rem-baseline * 1rem, $separator);
    }
    @else if type-of($value)=="list" {
      $value-separator: rem-separator($value);
      $value: rem-convert($to, $value...);
      $value: rem-separator($value, $value-separator);
      $result: append($result, $value, $separator);
    }
    @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result)==1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  }
  @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties)=="map" {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  }
  @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}

// .demo {
//   font-size: 1.5rem;
//   padding: 0.3125rem 0.625rem;
//   border-bottom: 0.0625rem solid black;
//   box-shadow: 0 0 0.125rem #ccc, inset 0 0 0.3125rem #eee;
//   text-shadow: 0.0625rem 0.0625rem #eee, -0.0625rem 0 #eee;
// }
// $rem-fallback: true;
// .demo {
//   @include rem(font-size, 24px); // Simple 
//   @include rem(padding, 5px 10px); // Multiple values 
//   @include rem(border-bottom, 1px solid black); // Multiple mixed values 
//   @include rem(box-shadow, 0 0 2px #ccc, inset 0 0 5px #eee); // Comma-separated values 
//   // Multiple properties 
//   @include rem((
//     margin: 10px 5px, 
//     text-shadow: (1px 1px #eee, -1px -1px #eee) // Parentheses needed because of comma 
//   ));
// }
@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin iconAngle($direction: 'up', $width: 50px, $height: 25px, $thick: 2px, $color: #222, $display: inline-block, $position: relative, $top: 50%, $left: 50%) {


  @if ($direction=='up' or $direction=='down') {
    $size: floor($width/$sqrt_2 - 2*$thick);
    $rate: 2*$height/$width;
    $margin-top: round($rate*$size/(2*$sqrt_2));

    &:before {
      content: '';
      position: absolute;
      box-sizing: content-box;
      top: $top;
      left: $left;
      width: $size;
      height: $size;
      @if ($rate==1) {
        -webkit-transform: translate(-$left, -$top) rotate(45deg);
        transform: translate(-$left, -$top) rotate(45deg);
      }
      @else {
        -webkit-transform: translate(-$left, -$top) scale(1, $rate) rotate(45deg);
        transform: translate(-$left, -$top) scale(1, $rate) rotate(45deg);
      }

      @if ($left==0) {
        margin-left: $margin-top;
      } @else if ($left==100%) {
        margin-left: -$margin-top;
      }

      @if ($direction=='up') {
        margin-top: $margin-top;
        border-top: $thick solid $color;
        border-left: $thick solid $color;
      }
      @else if ($direction=='down') {
        margin-top: -$margin-top;
        border-right: $thick solid $color;
        border-bottom: $thick solid $color;
      }
    }
  }
  @else if ($direction=='left' or $direction=='right') {
    $size: floor($height/$sqrt_2 - 2*$thick);
    $rate: 2*$width/$height;
    $margin-left: round($rate*$size/(2*$sqrt_2));

    &:before {
      content: '';
      position: absolute;
      box-sizing: content-box;
      top: $top;
      left: $left;
      width: $size;
      height: $size;

      @if ($rate==1) {
        -webkit-transform: translate(-$left, -$top) rotate(45deg);
        transform: translate(-$left, -$top) rotate(45deg);
      }
      @else {
        -webkit-transform: translate(-$left, -$top) scale($rate, 1) rotate(45deg);
        transform: translate(-$left, -$top) scale($rate, 1) rotate(45deg);
      }

      // @if ($left==0) {
      //   margin-left: $margin-top;
      // } @else if ($left==100%) {
      //   margin-left: -$margin-top;
      // }

      @if ($direction=='left') {
        margin-left: $margin-left;
        border-left: $thick solid $color;
        border-bottom: $thick solid $color;
      }
      @else if ($direction=='right') {
        margin-left: -$margin-left;
        border-top: $thick solid $color;
        border-right: $thick solid $color;
      }
    }
  }
}

@mixin iconCancel($size: 21px, $thick: 2px, $color: #000, $padding: 0, $display: inline-block, $position: relative) {
  position: $position;
  display: $display;
  width: $size + $padding*2;
  height: $size + $padding*2;

  &:before,
  &:after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: round($size*$sqrt_2 - $thick);
    height: $thick;
    background-color: $color;
  }

  &:before {
    -webkit-transform: translate(-50%, -50%) rotate(45deg);
    transform: translate(-50%, -50%) rotate(45deg);
  }

  &:after {
    -webkit-transform: translate(-50%, -50%) rotate(135deg);
    transform: translate(-50%, -50%) rotate(135deg);
  }
}

@mixin iconTriangle($direction: 'up', $width: 20px, $height: 10px, $color: #000, $top: 50%, $left: 50%) {


  &:before {
    content: '';
    position: absolute;
    top: $top;
    left: $left;
    transform: translate(-$left, -$top);

    @if ($direction=='up') {
      border-bottom: $height solid $color;
      border-left: round($width/2) solid transparent;
      border-right: round($width/2) solid transparent;
    }
    @else if ($direction=='down') {
      border-top: $height solid $color;
      border-left: round($width/2) solid transparent;
      border-right: round($width/2) solid transparent;
    }
    @else if ($direction=='left') {
      border-top: round($height/2) solid transparent;
      border-bottom: round($height/2) solid transparent;
      border-right: $width solid $color;
    }
    @else if ($direction=='right') {
      border-top: round($height/2) solid transparent;
      border-bottom: round($height/2) solid transparent;
      border-left: $width solid $color;
    }
  }
}


@mixin iconArrow($direction: 'up', $width: 50px, $height: 50px, $thick: 2px, $color: #222, $top: 50%, $left: 50%) {
  // position: $position;
  // display: $display;
  // width: $width;
  // height: $height;
  &:before {
    content: '';
    position: absolute;
    border-top: $thick solid $color;
    border-left: $thick solid $color;

    @if ($direction=='up' or $direction=='down') {
      $size: round($width/$sqrt_2 - $thick);
      left: 50%;
      width: $size;
      height: $size;

      @if ($direction=='up') {
        top: round($width/2);
        -webkit-transform: translate(-50%, -50%) rotate(45deg);
        transform: translate(-50%, -50%) rotate(45deg);
      }
      @else if ($direction=='down') {
        bottom: round($width/2);
        -webkit-transform: translate(-50%, 50%) rotate(-135deg);
        transform: translate(-50%, 50%) rotate(-135deg);
      }
    }
    @else if ($direction=='left' or $direction=='right') {
      $size: round($height/$sqrt_2 - $thick);
      top: 50%;
      width: $size;
      height: $size;

      @if ($direction=='left') {
        left: round($height/2); // -webkit-transform: translate(-50%, -50%) rotate(-45deg);
        // transform: translate(-50%, -50%) rotate(-45deg);
        transform: rotate(-45deg);
        margin-left: -$size / 2;
        margin-top: -$size / 2;
      }
      @else if ($direction=='right') {
        right: round($height/2);
        // right: round($height/2); // -webkit-transform: translate(50%, -50%) rotate(135deg);
        // transform: translate(-50%, -50%) rotate(135deg);
        transform: rotate(135deg);
        margin-right: -$size / 2;
        margin-top: -$size / 2;
      }
    }
  }

  &:after {
    content: '';
    position: absolute;
    background-color: $color;

    @if ($direction=='up' or $direction=='down') {

      @if ($direction=='up') {
        top: round($thick/$sqrt_2);
      }
      @else if ($direction=='down') {
        bottom: round($thick/$sqrt_2);
      }

      left: 50%;
      width: $thick;
      height: $height - round($thick/$sqrt_2);
      -webkit-transform: translate(-50%, 0);
      transform: translate(-50%, 0);

    }
    @else if ($direction=='left' or $direction=='right') {
      top: 50%;

      @if ($direction=='left') {
        left: round($thick/$sqrt_2);
      }
      @else if ($direction=='right') {
        right: round($thick/$sqrt_2);
      }

      width: $width - round($thick/$sqrt_2);
      height: $thick; // -webkit-transform: translate(0, -50%);
      // transform: translate(0, -50%);
      margin-top: -$thick / 2;
    }
  }
}

@mixin iconCancel($size: 21px, $thick: 2px, $color: #000, $padding: 0, $display: inline-block, $position: relative) {
  position: $position;
  display: $display;
  width: $size + $padding*2;
  height: $size + $padding*2;

  &:before,
  &:after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: round($size*$sqrt_2 - $thick);
    height: $thick;
    background-color: $color;
  }

  &:before {
    -webkit-transform: translate(-50%, -50%) rotate(45deg);
    transform: translate(-50%, -50%) rotate(45deg);
  }

  &:after {
    -webkit-transform: translate(-50%, -50%) rotate(135deg);
    transform: translate(-50%, -50%) rotate(135deg);
  }
}
